package sis.com.impl;

import java.sql.*;
import java.util.List;

import sis.com.Dao.StudentDao;
import sis.com.bo.Student;
import sis.com.util.SisDbUtil;

public class StudentDaoOrecleImpl implements StudentDao  {

	@Override
	public boolean addRecord(Student student) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rs;
		boolean isInserted=false;
		try {
			con=SisDbUtil.getConnection();
String sql="insert into Student6(id,name,gender,email,contact,college,branch)values"+
            "((select  nvl(max(id),1000)+1 from Student6),?,?,?,?,?,?)";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1,student.getName());
			pstmt.setString(2,student.getGender());
			pstmt.setString(3,student.getEmailId());
			pstmt.setString(4,student.getContact());
			pstmt.setString(5,student.getCollege());
			pstmt.setString(6,student.getBranch());
			rs=pstmt.executeUpdate();
			if(rs==1){
				isInserted=true;
			}
		} catch (SQLException e) {
			System.out.println("SQL error");
			e.printStackTrace();
		}finally{
			try {
				SisDbUtil.closeConnection(con);
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return isInserted;
	}

	@Override
	public boolean deleteRecord(long id) {
		Connection con=null;
		Statement  st=null;
		int rs;
		boolean isDeleted=false;
		 try {
			con=SisDbUtil.getConnection();
			st=con.createStatement();
			String sql="delete from Student6 where id="+id;
			rs=st.executeUpdate(sql);
			if(rs==1){
				isDeleted=true;
			}
		} catch (SQLException e) {
          System.out.println("Sql error");
			e.printStackTrace();
		}finally{
			try {
				SisDbUtil.closeConnection(con);
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		
		return isDeleted;
	}

	@Override
	public boolean updateRecord(Student student) {
		return false;
	}

	@Override
	public Student searchRecordById(long id) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		try {
			SisDbUtil.getConnection();
			String sql="";
			pstmt=con.prepareStatement(sql);
		} catch (SQLException e) {
         System.out.println("SQL Eroor");			
         e.printStackTrace();
		}finally{
			try {
				SisDbUtil.closeConnection(con);
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	@Override
	public List<Student> searchRecordByName(String name) {
		return null;
	}

	@Override
	public List<Student> showAllRecord() {
		return null;
	}

}
